---
import { getCollection } from "astro:content";
import {format} from 'date-fns';

export const prerender = true;

const allPosts = await getCollection("posts");

const allPhotos = await getCollection("photos", ({ data }) => {
  return data.isDraft !== true;
});

let randomPhoto = allPhotos.map(item => item)[Math.floor(Math.random() * allPhotos.length)];

import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Photo from "../components/Photo.astro";
---

<Layout title="Welcome to Astro.">
	<main>
		<p class="t-brand">
			<span class="t-weighted">Brian Hinton</span> is an accessibility-centered product design lead working to craft inclusive design, and technology experiences.
		</p>
		<ul role="list" class="link-card-grid">
			<Card
				href="https://docs.astro.build/"
				title="Documentation"
				body="Learn how Astro works and explore the official API docs."
			/>
			<Card
				href="https://astro.build/integrations/"
				title="Integrations"
				body="Supercharge your project with new frameworks and libraries."
			/>
			<Card
				href="https://astro.build/themes/"
				title="Themes"
				body="Explore a galaxy of community-built starter themes."
			/>
			<Card
				href="https://astro.build/chat/"
				title="Community"
				body="Come say hi to our amazing Discord community. ❤️"
			/>
		</ul>

		<ul>
			{allPosts.map(post => (
			  <li>
				<h2 class="t-display">{post.data.title}</h2>
				<time datetime={post.data.publishedDate.toISOString()}>
				  {post.data.publishedDate.toDateString()}
				</time>
				<p>{post.data.author}</p>
				<p>{post.data.summary}</p>
			  </li>
			))}
		  </ul>

		<section class="photo-container">
				<Photo location={randomPhoto.data.location} info={randomPhoto.data.info} photoDate={format(new Date(randomPhoto.data.photoDate), 'MMMM dd, yyyy')} imgAlt={randomPhoto.data.image.alt} imgSrc={randomPhoto.data.image.src} />
		</section>
	</main>
</Layout>



<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
